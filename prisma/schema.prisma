generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  member
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(member)

  teams TeamMembers[]

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  Tasks        Tasks[]
  TaskHistory  TaskHistory[]
  RefreshToken RefreshToken[]
}

model Team {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  teamMembers TeamMembers[]
  Tasks       Tasks[]
}

model TeamMembers {
  id        String    @id @default(uuid())
  userId    String
  teamId    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

enum Status {
  pending
  in_progress
  completed
}

enum Priority {
  low
  medium
  high
}

model Tasks {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      Status?   @default(pending)
  priority    Priority?

  assignedTo String @map("assigned_to")
  teamId     String @map("team_id")

  user User @relation(fields: [assignedTo], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
  TaskHistory TaskHistory[]
}

model TaskHistory {
  id String @id @default(uuid())

  task_id    String
  changed_by String
  old_status Status
  new_status Status
  changed_at DateTime @default(now()) @map("changed_at")

  task      Tasks @relation(fields: [task_id], references: [id], onDelete: Cascade)
  changedBy User  @relation(fields: [changed_by], references: [id])

  @@map("task_history")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refresh_token")
}
